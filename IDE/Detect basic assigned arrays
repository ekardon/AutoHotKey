; adjust this as needed
; #ifWinActive, ahk_class PX_WINDOW_CLASS ahk_exe sublime_text.exe
; type in /array to theoretically find all arrays 
:x:/array::FindArrays()
; #if 


FindArrays()
{
	oldClip := ClipboardAll
	Clipboard := ""
	Send ^+{home}^c
	ClipWait
	send {right}
	sleep, 50
	workingString := Clipboard
	Clipboard := oldClip

	regex := []
	list := StrSplit(workingString, "`n")
			; Array[] := ""
	regex := ["O)(?P<ArrayName>^.*?):=.*?Array\(.*?$"	
			; Array[Index] := Value
			, "O)(?P<ArrayName>^.*?)\[.*?:="
			; Array := [Item1, Item2, ..., ItemN]
			, "O)(?P<ArrayName>.*?):=.*?\[.*?,"
			; Value := Array[Index]
   			; ReturnValue := Object[MethodName](Parameters)
   			, "O).*?:=(?P<ArrayName>.*?[^ ])\[.*?$"
   			; Array.InsertAt(Index, Value, Value2, ...)
   			, "O)(?P<ArrayName>[A-z0-9_\.\-]*?)\.(?i)InsertAt\("
   			; array.push()
   			, "O)(?P<ArrayName>[A-z0-9_\.\-]*?)\.(?i)Push\("
   			; array.pop()
   			, "O)(?P<ArrayName>[A-z0-9_\.\-]*?)\.(?i)Pop\(\)"
   			; Array := Object("KeyA", ValueA, "KeyB", ValueB, ..., "KeyZ", ValueZ)
   			, "O)(?P<ArrayName>^[A-z0-9_\-]*?)\s*:=.*?(?i)Object\("
   			; newVar := StrSplit(String, [Delimiters, OmitChars])
   			, "O)(?P<ArrayName>.*?):=\s*(?i)StrSplit\("
   			; RemovedValue := Array.Delete(Key)
   			, "O)(?P<ArrayName>[A-z0-9_\-]*?)\.(?i)Delete\("
   			; Array := {KeyA: ValueA, KeyB: ValueB, ..., KeyZ: ValueZ}
   			, "O)(?P<ArrayName>[A-z0-9_\-]*?)\s?:=\s*{.*?:"]
   			; any xxx.xxx.
   			;~ , "O)(?P<ArrayName>[A-z0-9_\-]+?\.([A-z0-9_\-]*?\.)*)([^\s\(])*"]

	str := []
	dynamic := []
	for k, v in List
	{
		for index, regNum in regex
		{
			if (Trim(v) ~= "^;")

				continue
			If RegexMatch(v, regNum)
			{
				RegExMatch(v, regNum, outVar)
				if !(RegexMatch(trim(outVar.ArrayName),"^)")) 
					&& !(Trim(outVar.ArrayName) ~= "^)")
					&& !(Trim(outVar.ArrayName) ~= "^}")
					&& !(Trim(outVar.ArrayName) ~= "^\(")
					&& !(Trim(outVar.ArrayName) ~= "^\{")
					&& !(Trim(outVar.ArrayName) ~= "^\[")
					&& !(Trim(outVar.ArrayName) ~= "^""")
					&& !(Trim(outVar.ArrayName) ~= "^,")
					&& !(Trim(outVar.ArrayName) ~= "^%")
				{
		        	str.push(TRIM(outVar.ArrayName))
				}
				if (Trim(outVar.ArrayName) ~= "^%")
					dynamic.push(TRIM(outvar.ArrayName))
			}
		  
		    else if (regNum = "O)(?P<ArrayName>[A-z0-9_\-]+?\.([A-z0-9_\-]*?\.)*)([^\s\(])*")
		    {	
				if !(RegexMatch(trim(outVar.ArrayName),"^)")) 
					&& !(Trim(outVar.ArrayName) ~= "^)")
					&& !(Trim(outVar.ArrayName) ~= "^}")
					&& !(Trim(outVar.ArrayName) ~= "^\(")
					&& !(Trim(outVar.ArrayName) ~= "^\{")
					&& !(Trim(outVar.ArrayName) ~= "^\[")
					&& !(Trim(outVar.ArrayName) ~= "^""")
					&& !(Trim(outVar.ArrayName) ~= "^,")
					&& !(Trim(outVar.ArrayName) ~= "^%")
				{
					RegExMatch(v, regNum, outVar)
			        str.push(SubSTr(TRIM(outVar.ArrayName),1,-1))
				}
		    }
		}
	}

	; Remove Duplicates
	FoundArray := removeDuplicates(str)    
	dynamicArray := removeDuplicates(dynamic)
	if (foundArray.count()) || (dynamicArray.count())
	{
		if (foundArray.count())
		{
			stringVar := "Arrays found:`n`n" 	    
			for k, v in FoundArray
				stringVar .= k ") " v "`n"

			;~ ArrayStrings=
			strFoundArray := "`n;~ Arrays:`n"
			for k, v in FoundArray
				{
					; first line: strArray := ""
					strFoundArray .= "str" StrReplace(v, ".") " := """" `n"
					; for k, v in Array
					. "For k, v in " v "`n"
							; strArray .= k ": " v "`n"
							. A_Tab . "str" StrReplace(v, ".") " .= k "": "" v "" ``n "" `n"
					; MsgBox % "Array : ArrayName`n"
					. "MsgBox % ""Array: " v "``n""`n"
					; .	"`n " strArray
					. "	.	""``n "" str" v "`n`n"
				}

			SendClip(strFoundArray)
		}

		if (dynamicArray.count())
		{
			stringDynamic := "Dynamic Array Variables: `n`n"
				for k, v in dynamicArray
					stringDynamic .= k ": " v "`n"

		}
		sleep, 100
	}

	else
		stringVar := "No arrays found above"
	;~ MsgBox % stringVar . "`n" . stryingDynamic
return
}
